@page "/archivedFlightList"
@inject NavigationManager _navigationManager;
@inject FlightService _flightService;
@inject AppState AppState
@if (AppState.LoggedIn == null)
{
    <p>You Need To Login To See This page!</p>
}
else
{
    <h3>Archived Flights</h3>

    @if(Flights == null)
    {
        <p>Loading...</p>
    }
    else
    {
        @if (Flights.Count != 0)
        {
            <table class="table table-responsive">
                <thead>
                    <tr>
                        <th>Number</th>
                        <th>Date</th>
                        <th>Time</th>
                        <th>Carrier</th>
                        <th>Airport to</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var flight in Flights)
                    {
                        <tr>
                            <td>@flight.Number</td>
                            <td>@flight.FlightDate.ToString("dd.MM.yyyy")</td>
                            <td>@flight.FlightTime</td>
                            <td>@flight.Carrier?.Name</td>
                            <td>@flight.AirportTo</td>
                             @if (AppState.LoggedIn == "Admin")
                            {
                                <td>
                                    <a href="/EditFlight/@flight.Id" class="btn btn-primary">
                                    <span class="oi oi-pencil"></span>    
                                </a>
                                <button type="button" class="btn btn-danger" @onclick="() => DeleteFlight(flight.Id)">
                                    <span class="oi oi-delete"></span>
                                </button>
                                <button type="button" class="btn btn-secondary" @onclick="() => UnarchiveFlight(flight.Id)">
                                    <span class="oi oi-transfer"></span>
                                </button>
                            </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>No archived flights! Go to flights list to archive flight!</p>
        }
    }
}
<ConfirmationDialog @ref="UnarchiveConfirmationDialog" ConfirmationChanged="@OnUnarchiveConfirmationSelected" Question="Return flight to flight list?"></ConfirmationDialog>
<ConfirmationDialog @ref="DeleteConfirmationDialog" ConfirmationChanged="@OnDeleteConfirmationSelected" Question="Delete flight?"></ConfirmationDialog>
@code {
    public List<Flight> Flights { get; set; }
    public ConfirmationDialog DeleteConfirmationDialog{ get; set; }
    public ConfirmationDialog UnarchiveConfirmationDialog{ get; set; }
    public int SelectedFlightId{ get; set; }

    protected override async Task OnInitializedAsync()
    {
        Flights = await _flightService.GetArchivedFlights();
       
    }
    private async Task DeleteFlight(int flightId)
    {
        SelectedFlightId = flightId;
        DeleteConfirmationDialog.Show();
    }

    private async Task OnDeleteConfirmationSelected(bool isDeleteConfirmed)
    {
        if(isDeleteConfirmed)
        {
            await _flightService.DeleteFlight(SelectedFlightId);
            Flights = await _flightService.GetArchivedFlights();
        }
    }

    private async Task OnUnarchiveConfirmationSelected(bool isArchiveConfirmed)
    {
        if(isArchiveConfirmed)
        {
            await _flightService.UnarchiveFlight(SelectedFlightId);
            Flights = await _flightService.GetArchivedFlights();
        }
    }

    private async Task UnarchiveFlight(int flightId)
    {
        SelectedFlightId = flightId;
        UnarchiveConfirmationDialog.Show();
    }
}
